////////////////////////////////////////////////////////////
function find_gene_start(xs) {
    if(length(xs)===0 || length(xs)===1|| length(xs)===2){return null;}
    else {

if (head(tail(member("A",xs)))==="T"){
 if (head(tail(tail(member("A",xs)))) === "G"){
     return list((tail(tail(tail(member("A",xs)))))) ;
 }
 else {
     return find_gene_start(tail(tail(member("A",xs))));
}
}
else {
     return find_gene_start(tail(member("A",xs)));
}
}}



////////////////////////////////////////////////////////////
// Question 1F
////////////////////////////////////////////////////////////


 function find_gene_end(xs) {

function helper(xs){
    const len= length(xs) ;
    for(let i=0;i<len-1; i=i+1){
        if (list_ref(xs,i)==="T" && list_ref(xs,i+1)!=="C"
       && list_ref(xs,i+1)!=="T"&& list_ref(xs,i+2)!=="T"
        && list_ref(xs,i+2)!=="C"){
            return i ;
        }
        
    }
    return null;
}

function pot(xs, counter){
    return counter===0
    ? (null)
    : pair( head(xs), pot(tail(xs),counter-1)) ;
}

return is_null(helper(xs))
? null
: list(pot(xs,helper(xs)));
}
////////////////////////////////////////////////////////////
// Question 1G
////////////////////////////////////////////////////////////

function all_genes(xs) {
    const start = find_gene_start(xs);
    if (is_null(start)){
        return null;
    }
   else{ const end= find_gene_end(head(start)) ;
   if(is_null(end)){
       return null;
   }
   else {
       return pair(head(end),all_genes(head(start)));
   }}
    
    
}
 
all_genes(list("T", "A", "T", "G", "C", "A", "T", "A", "A", "G", "T", "A", "G", "A",
"T", "G", "A", "T", "G", "A", "T")); // returns list(list("C", "A"), list("A"))





